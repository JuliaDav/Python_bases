'''
Задача-1: Реализовать индексацию элементов списка не с нуля, а с 5, т.е. 5, 6, 7
и т.д.
'''
class MyList(list):
    def __getitem__(self, offset):
        return list.__getitem__(self, offset - 5)
x = MyList('abcdefg')
print(x)
print(x[5])

'''
Задача-2: Придумать любу структуру данных. Она должна содержать два атрибута.
Значение одного атрибута передается в конструктор, а значение другого - определяетсяъ
прямо в конструкторе класса. Для этой структуры данных написать метод,
который должен выполнять какой-то функционал. Создать экземпляр класса, передать
данные. Вызывать метод. Проверить, что находится в переменной-экземпляре класса.
Переопределить метод __str__. Этот метод должен возвращать тот результат,
который вы захотите. Проверить еще раз. В комментарии написать, в чем разница
между подходом с использованием метода __str__ и без него.
'''
import math
class Vector:
    def __init__(self, x):
        self.x = x
        self.y = 3
    def __str__(self):
        return 'Вектор с координатами x = {}, y = {}'.format(self.x, self.y)
    def lenth(self):
        return math.sqrt(self.x**2 + self.y**2)
    #найдем x при заданной длине вектора
    @staticmethod
    def x_coord(lenth):
        return (math.sqrt(lenth ** 2 - 9))
v1 = Vector(4)
print(v1)
print('Длина вектора = ', v1.lenth())
print('При заданной длине вектора Координата x = ', v1.x_coord(5))
'''
Задача-3: Продолжить работу над задачей 2. Добавить еще один метод. Он должен
вывзваться из экземпляра класса. В этот метод нужно передать некое значение.
Сам метод должен ловить значение и что-то с ним делать и возвращать результат.
Реализовать для этого метода декоратор @staticmethod
'''




